// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Init route file should generate to correct tree for the pages folder 1`] = `
"/**
 * ---------------------
 * ðŸš—ðŸš¦ Generated by nuxt-typed-router. Do not modify !
 * ---------------------
 * */

export const routerPagesNames = {
  activate: 'activate' as const,
  index: 'index' as const,
  childOne: {
    childOneChildOneSubOne: 'parent-child-one-child-one-sub-one' as const,
    user: { index: 'parent-child-one-child-one-sub-one-user' as const },
    childOneChildOneSubTwo: 'parent-child-one-child-one-sub-two' as const,
    index: 'parent-child-one' as const,
  },
  childTwo: {
    childTwoId: 'parent-child-two-id' as const,
    childTwoChildOneSubOne: 'parent-child-two-child-one-sub-one' as const,
    index: 'parent-child-two' as const,
    profile: {
      id: {
        slug: { index: 'parent-child-two-profile-id-slug' as const },
        index: 'parent-child-two-profile-id' as const,
      },
      index: 'parent-child-two-profile' as const,
    },
  },
  rootPage: 'rootPage' as const,
};

export type TypedRouteList =
  | 'activate'
  | 'index'
  | 'parent-child-one-child-one-sub-one'
  | 'parent-child-one-child-one-sub-one-user'
  | 'parent-child-one-child-one-sub-two'
  | 'parent-child-one'
  | 'parent-child-two-id'
  | 'parent-child-two-child-one-sub-one'
  | 'parent-child-two'
  | 'parent-child-two-profile-id-slug'
  | 'parent-child-two-profile-id'
  | 'parent-child-two-profile'
  | 'rootPage';
"
`;

exports[`Init route file should generate to correct tree for the pages folder 2`] = `
"/**
 * ---------------------
 * ðŸš—ðŸš¦ Generated by nuxt-typed-router. Do not modify !
 * ---------------------
 * */

import type {
  NavigationFailure,
  RouteLocation,
  RouteLocationNormalizedLoaded,
  RouteLocationOptions,
  RouteQueryAndHash,
} from 'vue-router';
import type { TypedRouteList } from './__routes';

// -- Unbuild CommonJS Shims --
import __cjs_url__ from 'url';
import __cjs_path__ from 'path';
import __cjs_mod__ from 'module';
const __filename = __cjs_url__.fileURLToPath(import.meta.url);
const __dirname = __cjs_path__.dirname(__filename);
const require = __cjs_mod__.createRequire(import.meta.url);

export type RouteListDecl = {
  activate: 'activate';
  index: 'index';
  childOne: {
    childOneChildOneSubOne: 'parent-child-one-child-one-sub-one';
    user: { index: 'parent-child-one-child-one-sub-one-user' };
    childOneChildOneSubTwo: 'parent-child-one-child-one-sub-two';
    index: 'parent-child-one';
  };
  childTwo: {
    childTwoId: 'parent-child-two-id';
    childTwoChildOneSubOne: 'parent-child-two-child-one-sub-one';
    index: 'parent-child-two';
    profile: {
      id: {
        slug: { index: 'parent-child-two-profile-id-slug' };
        index: 'parent-child-two-profile-id';
      };
      index: 'parent-child-two-profile';
    };
  };
  rootPage: 'rootPage';
};

export type TypedRouteParams = {
  activate: never;
  index: never;
  'parent-child-one-child-one-sub-one': never;
  'parent-child-one-child-one-sub-one-user': never;
  'parent-child-one-child-one-sub-two': never;
  'parent-child-one': never;
  'parent-child-two-id': {
    id: string | number;
  };
  'parent-child-two-child-one-sub-one': never;
  'parent-child-two': never;
  'parent-child-two-profile-id-slug': {
    slug?: string | number;
    id?: string | number;
  };
  'parent-child-two-profile-id': {
    id?: string | number;
  };
  'parent-child-two-profile': never;
  rootPage: never;
};

type TypedRouteParamsStructure = {
  [K in TypedRouteList]: Record<string, string | number> | never;
};

type TypedLocationAsRelativeRaw<T extends TypedRouteList> = {
  name?: T;
  params?: TypedRouteParams[T];
};

type TypedRouteLocationRaw<T extends TypedRouteList> = RouteQueryAndHash &
  TypedLocationAsRelativeRaw<T> &
  RouteLocationOptions;

export interface TypedRouter {
  /**
   * Remove an existing route by its name.
   *
   * @param name - Name of the route to remove
   */
  removeRoute(name: TypedRouteList): void;
  /**
   * Checks if a route with a given name exists
   *
   * @param name - Name of the route to check
   */
  hasRoute(name: TypedRouteList): boolean;
  /**
   * Returns the {@link RouteLocation | normalized version} of a
   * {@link RouteLocationRaw | route location}. Also includes an \`href\` property
   * that includes any existing \`base\`. By default the \`currentLocation\` used is
   * \`route.currentRoute\` and should only be overriden in advanced use cases.
   *
   * @param to - Raw route location to resolve
   * @param currentLocation - Optional current location to resolve against
   */
  resolve<T extends TypedRouteList>(
    to: TypedRouteLocationRaw<T>,
    currentLocation?: RouteLocationNormalizedLoaded
  ): RouteLocation & {
    href: string;
  };
  /**
   * Programmatically navigate to a new URL by pushing an entry in the history
   * stack.
   *
   * @param to - Route location to navigate to
   */
  push<T extends TypedRouteList>(
    to: TypedRouteLocationRaw<T>
  ): Promise<NavigationFailure | void | undefined>;
  /**
   * Programmatically navigate to a new URL by replacing the current entry in
   * the history stack.
   *
   * @param to - Route location to navigate to
   */
  replace<T extends TypedRouteList>(
    to: TypedRouteLocationRaw<T>
  ): Promise<NavigationFailure | void | undefined>;
}

declare module 'nuxt3/dist/app/nuxt' {
  export interface NuxtApp {
    $typedRouter: TypedRouter;
    $routesList: RouteListDecl;
  }
}

declare module '@vue/runtime-core' {
  interface ComponentCustomProperties {
    $typedRouter: TypedRouter;
    $routesList: RouteListDecl;
  }
}
"
`;

exports[`Init route file should generate to correct tree for the pages folder 3`] = `
"/**
 * ---------------------
 * ðŸš—ðŸš¦ Generated by nuxt-typed-router. Do not modify !
 * ---------------------
 * */

import { useNuxtApp } from '#app';
import { TypedRouter, RouteListDecl } from './typed-router';

/** Returns instances of $typedRouter and $routesList fully typed to use in your components or your Vuex/Pinia store
 *
 * @exemple
 *
 * \`\`\`ts
 * const { router, routes } = useTypedRouter();
 * \`\`\`
 */
export const useTypedRouter = (): {
  /** Export of $router with type check */
  router: TypedRouter;
  /** Contains a typed dictionnary of all your route names (for syntax sugar) */
  routes: RouteListDecl;
} => {
  const { $router } = useNuxtApp();

  const routesList = {
    activate: 'activate',
    index: 'index',
    childOne: {
      childOneChildOneSubOne: 'parent-child-one-child-one-sub-one',
      user: { index: 'parent-child-one-child-one-sub-one-user' },
      childOneChildOneSubTwo: 'parent-child-one-child-one-sub-two',
      index: 'parent-child-one',
    },
    childTwo: {
      childTwoId: 'parent-child-two-id',
      childTwoChildOneSubOne: 'parent-child-two-child-one-sub-one',
      index: 'parent-child-two',
      profile: {
        id: {
          slug: { index: 'parent-child-two-profile-id-slug' },
          index: 'parent-child-two-profile-id',
        },
        index: 'parent-child-two-profile',
      },
    },
    rootPage: 'rootPage',
  };

  return {
    router: $router,
    routes: routesList,
  } as any;
};
"
`;

exports[`Init route file should generate to correct tree for the pages folder 4`] = `
"/**
 * ---------------------
 * ðŸš—ðŸš¦ Generated by nuxt-typed-router. Do not modify !
 * ---------------------
 * */

import { defineNuxtPlugin } from '#app';

export default defineNuxtPlugin((nuxtApp) => {
  const routesList = {
    activate: 'activate',
    index: 'index',
    childOne: {
      childOneChildOneSubOne: 'parent-child-one-child-one-sub-one',
      user: { index: 'parent-child-one-child-one-sub-one-user' },
      childOneChildOneSubTwo: 'parent-child-one-child-one-sub-two',
      index: 'parent-child-one',
    },
    childTwo: {
      childTwoId: 'parent-child-two-id',
      childTwoChildOneSubOne: 'parent-child-two-child-one-sub-one',
      index: 'parent-child-two',
      profile: {
        id: {
          slug: { index: 'parent-child-two-profile-id-slug' },
          index: 'parent-child-two-profile-id',
        },
        index: 'parent-child-two-profile',
      },
    },
    rootPage: 'rootPage',
  };

  return {
    provide: {
      typedRouter: nuxtApp.$router,
      routesList,
    },
  };
});
"
`;
